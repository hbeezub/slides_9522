\documentclass{beamer}
\usepackage{listings}
\usepackage[utf8]{inputenc}

%%usepackage{minted}
\usepackage{color}
 
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}
\definecolor{backcolour}{rgb}{0.95,0.95,0.92}
 
\lstdefinestyle{mystyle}{
    backgroundcolor=\color{backcolour},   
    commentstyle=\color{codegreen},
    keywordstyle=\color{magenta},
    numberstyle=\tiny\color{codegray},
    stringstyle=\color{codepurple},
    basicstyle=\footnotesize,
    breakatwhitespace=false,         
    breaklines=true,                 
    captionpos=b,                    
    keepspaces=true,                 
    numbers=left,                    
    numbersep=5pt,                  
    showspaces=false,                
    showstringspaces=false,
    showtabs=false,                  
    tabsize=2
}
 
\lstset{style=mystyle}
 
\begin{document}

\title{The 9522: A python project}
\author{Heidi Beezub}

\begin{frame}
  \titlepage
\begin{figure}
\includegraphics[scale=0.5]{profilePic}
\caption{Beezub}
\end{figure}
\end{frame}

\begin{frame}
  \frametitle{Outline}
    \tableofcontents
\end{frame}

\section{Install and Load Libraries}
\begin{frame}[fragile]
  \frametitle{Install and Load Libraries}
  
Using PythonInR to access the python code through R studio  
        <<echo=FALSE,warning=FALSE,message=FALSE>>=
        library(PythonInR)
        
        @

\end{frame}

\section{Background}
\begin{frame}[fragile]
  \frametitle{The 9522 and Rejects}
      \begin{itemize}
      \item<1->
        The DCM 9522 report is one of the reports I use in order to correct 'rejects' in my job.DCM stand for Department Cost Manager.  It includes multiple departments and all the products (both supplies & services) that each department provides.

      \item<2->
        
\textbf{What is a reject?}

   A reject is data that the system collects but then cannot process or put into the correct category.  Rejects are typically a 'new' item that the simply needs the interface created or built in the system.  Sometimes this is an existing item that is either coming into the system in a new way.
    \item<3->
    The 9522 helps me to determine if this is an existing item for which I need to create an additional interface. Or if it is a new product, which means I need to create the new product (including the interface).

    \end{itemize}
  


\end{frame}

\section{Background continued}
\begin{frame}[fragile]
  \frametitle{Background continued}
  \begin{itemize}  
  \item<1->
    The report is unwieldy (6,600 pages).  I have to save the text file as a word file & then search the word file for the feeder key information.  Since this is typically numerical it can result in multiple 'hits' many for the wrong field.  I also cannot easily compare the multiple hits in the word file. 
  \item<2->
As an excel file I would be able to search on the columns and view any similar items (all at the same time).  It helps in identifying items to see what department(s) similar items are used in.  

\end{itemize}
  
\end{frame}

\section{Methodology}
\begin{frame}[fragile]
  \frametitle{Methodology}
\begin{itemize}  
\item<1->
\textbf{Source data}
My first step was to take a VERY critical look at the structure of the report.
The report includes headers on each page which can bisect the data at any point.  In addition to the information I want, the data also includes data I don't want that is part of the Bill of Materials.
\item<2-> 
\textbf{The desired end result}
A csv (excel file) that I will be able to filter to check items, sort to identify duplicate products and otherwise manipulate the data. 
\item<3-> 
\textbf{Pseudocode}
First, I wrote down (pen & paper) what I needed to do.
Insert picture

\end{itemize}

\end{frame}


\section{Code for IP Number}
\begin{frame}[fragile]
  \frametitle{Code for IP Number}
  %%\lstinputlisting[language=Python]{9522_slide_IPNUM_only.py} inputs code direct from file
  %%\inputminted{python}{9522_slide_IPNUM_only.py}
%%framebreak won't work with the lstlisting for language =python   
\begin{lstlisting}[language=Python]
def process_file(reader):
    result_line= ''
    result=''
    slide="IPNUM" +'\n'
    #first we need to add headers
    with open('9522_slide_new.csv', 'a') as output_file:
        output_file.write('"IPNUM"' +'\n')
    for line in reader:
        line=line.strip()    #removes leading/trailing whitespace
        field = line.split()
\end{lstlisting}
        
%%echo python_name-no.py    cntl+enter
%%control+shift+enter   needs to be a .py file in Rstudio

   
\end{frame}

\section{Code for IP Number continued}
\begin{frame}[fragile]
  \frametitle{Code for IP Number continued}
  %%\lstinputlisting[language=Python]{9522_slide_IPNUM_only.py} inputs code direct from file
  %%\inputminted{python}{9522_slide_IPNUM_only.py}
%%framebreak won't work with the lstlisting for language =python   
\begin{lstlisting}[language=Python]

if len(field)>3:
      for i in range(0,2):
         #find IPNUM
        if field[i] == 'IP' and field[i+1] =='NUM':
             #save IPNUM
            ipnum=field[i+2].strip(':')
            #(last item before write to file)
            #when result has no data it is a blank line
            if result_line != None:
                with open('9522_slide_new.csv', 'a') as output_file:
                    list_2_line=ipnum
                    output_file.write(list_2_line+'\n')
                    result=''
                    list_2_line=''
    
if __name__ == '__main__':
    with open('9522_slide.txt', 'r') as input_file:
        process_file(input_file)

\end{lstlisting}
%indents off to save slide space
%%echo python_name-no.py    cntl+enter
%%control+shift+enter   needs to be a .py file in Rstudio
  
   
\end{frame}





\section{Seq num, feeder system and feeder key}
\begin{frame}[fragile]
  \frametitle{Seq num, feeder system and feeder key}
  
    blank slide
   
  
  
\end{frame}

\section{Product Description}
\begin{frame}[fragile]
  \frametitle{Product description}
  
  blank slide
  
  
\end{frame}

\section{Debugging}
\begin{frame}[fragile]
  \frametitle{Debugging}
  
  blank slide
  
  
\end{frame}

\section{Additional Debugging}
\begin{frame}[fragile]
  \frametitle{Additional Debugging}
  
  Blank slide
  
\end{frame}

\section{Conclusion}
\begin{frame}[fragile]
  \frametitle{Conclusion}
  
  Blank slide
  
\end{frame}
\end{document}